/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
	TRAPHANDLER_NOEC(trap_divide_error, T_DIVIDE)					# 0		divide error
	TRAPHANDLER_NOEC(trap_debug_exception, T_DEBUG)					# 1		debug exception
	TRAPHANDLER_NOEC(trap_nmi, T_NMI)								# 2		non-maskable interrupt
    TRAPHANDLER_NOEC(trap_breakpoint, T_BRKPT)						# 3		breakpoint
	TRAPHANDLER_NOEC(trap_overflow, T_OFLOW)						# 4		overflow
	TRAPHANDLER_NOEC(trap_bounds_check, T_BOUND)					# 5		bounds check
	TRAPHANDLER_NOEC(trap_illegal_opcode, T_ILLOP)					# 6		illegal opcode
	TRAPHANDLER_NOEC(trap_device_not_available, T_DEVICE)			# 7		device not available
	TRAPHANDLER(trap_double_fault, T_DBLFLT)						# 8		double fault
	TRAPHANDLER_NOEC(trap_coprocessor_segment_overrun, T_COPROC)	# 9		reserved (not generated by recent processors)
	TRAPHANDLER(trap_invalid_TSS, T_TSS)							# 10	invalid task switch segment
	TRAPHANDLER(trap_segment_not_present, T_SEGNP)					# 11	segment not present
	TRAPHANDLER(trap_stack_exception, T_STACK)						# 12	stack exception
	TRAPHANDLER(trap_general_protection_fault, T_GPFLT)				# 13	general protection fault
	TRAPHANDLER(trap_page_fault, T_PGFLT)							# 14	page fault
	TRAPHANDLER_NOEC(trap_reserved, T_RES)							# 15	reserved
	TRAPHANDLER_NOEC(trap_float_point_error, T_FPERR)				# 16	floating point error
	TRAPHANDLER(trap_alignment_check, T_ALIGN)						# 17	alignment check
	TRAPHANDLER_NOEC(trap_machine_check, T_MCHK)					# 18	machine check
	TRAPHANDLER_NOEC(trap_SIMD_float_point_error, T_SIMDERR)		# 19	SIMD floating point error
	TRAPHANDLER_NOEC(trap_system_call, T_SYSCALL)					# 48	system call

.data
.globl idt_entries, idt_entries_end
idt_entries:
	.long trap_divide_error						# 0		divide error
	.long trap_debug_exception					# 1		debug exception
	.long trap_nmi								# 2		non-maskable interrupt
	.long trap_breakpoint						# 3		breakpoint
	.long trap_overflow							# 4		overflow
	.long trap_bounds_check						# 5		bounds check
	.long trap_illegal_opcode					# 6		illegal opcode
	.long trap_device_not_available				# 7		device not available
	.long trap_double_fault						# 8		double fault
	.long trap_coprocessor_segment_overrun		# 9		reserved (not generated by recent 
	.long trap_invalid_TSS						# 10	invalid task switch segment
	.long trap_segment_not_present				# 11	segment not present
	.long trap_stack_exception					# 12	stack exception
	.long trap_general_protection_fault			# 13	general protection fault
	.long trap_page_fault						# 14	page fault
	.long trap_reserved							# 15	reserved
	.long trap_float_point_error				# 16	floating point error
	.long trap_alignment_check					# 17	alignment check
	.long trap_machine_check					# 18	machine check
	.long trap_SIMD_float_point_error			# 19	SIMD floating point error
	.fill 28, 4, 0								# 		28 null entries
	.long trap_system_call						# 48	system call
idt_entries_end:

/*
 * Lab 3: Your code here for _alltraps
 */
.text
_alltraps:
	push %ds
	push %es
	pushal
	
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es
	
	pushl %esp
	call trap