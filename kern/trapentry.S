/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
	TRAPHANDLER_NOEC(trap_divide_error, T_DIVIDE)				# divide error
	TRAPHANDLER_NOEC(trap_debug_exception, T_DEBUG)						# debug exception
	TRAPHANDLER_NOEC(trap_nmi, T_NMI)							# non-maskable interrupt
    TRAPHANDLER_NOEC(trap_breakpoint, T_BRKPT)					# breakpoint
	TRAPHANDLER_NOEC(trap_overflow, T_OFLOW)						# overflow
	TRAPHANDLER_NOEC(trap_bounds_check, T_BOUND)						# bounds check
	TRAPHANDLER_NOEC(trap_illegal_opcode, T_ILLOP)					# illegal opcode
	TRAPHANDLER_NOEC(trap_device_not_available, T_DEVICE)		# device not available
	TRAPHANDLER(trap_double_fault, T_DBLFLT)						# double fault
	TRAPHANDLER_NOEC(trap_coprocessor_segment_overrun, T_COPROC)	# reserved (not generated by recent processors)
	TRAPHANDLER(trap_invalid_TSS, T_TSS)							# invalid task switch segment
	TRAPHANDLER(trap_segment_not_present, T_SEGNP)				# segment not present
	TRAPHANDLER(trap_stack_exception, T_STACK)						# stack exception
	TRAPHANDLER(trap_general_protection_fault, T_GPFLT)				# general protection fault
	TRAPHANDLER(trap_page_fault, T_PGFLT)						# page fault
	TRAPHANDLER_NOEC(trap_reserved, T_RES)						# reserved
	TRAPHANDLER_NOEC(trap_float_point_error, T_FPERR)			# floating point error
	TRAPHANDLER(trap_alignment_check, T_ALIGN)					# alignment check
	TRAPHANDLER_NOEC(trap_machine_check, T_MCHK)					# machine check
	TRAPHANDLER_NOEC(trap_SIMD_float_point_error, T_SIMDERR)		# SIMD floating point error
	TRAPHANDLER_NOEC(trap_system_call, T_SYSCALL)				# system call

.data
.globl idt_entries
idt_entries:
	.long trap_divide_error
	.long trap_debug_exception
	.long trap_nmi
	.long trap_breakpoint
	.long trap_overflow
	.long trap_bounds_check
	.long trap_illegal_opcode
	.long trap_device_not_available
	.long trap_double_fault
	.long trap_coprocessor_segment_overrun
	.long trap_invalid_TSS
	.long trap_segment_not_present
	.long trap_stack_exception
	.long trap_general_protection_fault
	.long trap_page_fault
	.long trap_reserved
	.long trap_float_point_error
	.long trap_alignment_check
	.long trap_machine_check
	.long trap_SIMD_float_point_error
	.fill 28, 4, 0						# 29 null entries
	.long trap_system_call
.global idt_entries_end
idt_entries_end:

/*
 * Lab 3: Your code here for _alltraps
 */
.text
_alltraps:
	push %ds
	push %es
	pushal
	
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es
	
	pushl %esp
	call trap

/*
 * entry code for system call using sysenter/sysexit
 */
.global _sysenter
_sysenter:
	pushl 4(%edi)
	pushl (%edi)
	pushl %ebx
	pushl %ecx
	pushl %edx
	pushl %eax
	call syscall
	
	movl %ebp, %ecx
	movl %esi, %edx
	sysexit
